generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String           @id @default(cuid())
  name                String?
  email               String?          @unique
  handle              String?          @unique
  emailVerified       DateTime?
  onboardingCompleted Boolean          @default(false)
  about               String?
  image               String?
  accessRole          AccessRole       @default(User)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @default(now()) @updatedAt
  accounts            Account[]
  sessions            Session[]
  userRoles           UserRole[]
  userSocials         UserSocial[]
  project             Project[]
  projectMembers      ProjectMembers[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id                    String                  @id @default(cuid())
  name                  String                  @unique
  userRole              UserRole[]
  projectLookingForRole ProjectLookingForRole[]
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model UserSocial {
  userId String
  social Social
  link   String
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, social])
}

model Project {
  id              String                  @id @default(cuid())
  name            String
  description     String
  readMoreLink    String?
  stack           String[]
  ownerId         String
  owner           User                    @relation(fields: [ownerId], references: [id])
  members         ProjectMembers[]
  lookingForRoles ProjectLookingForRole[]
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @default(now()) @updatedAt
}

model ProjectLookingForRole {
  projectId String
  roleId    String
  project   Project @relation(fields: [projectId], references: [id])
  role      Role    @relation(fields: [roleId], references: [id])

  @@id([projectId, roleId])
}

model ProjectMembers {
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@id([projectId, userId])
}

enum Social {
  Telegram
  Discord
  LinkedIn
}

enum AccessRole {
  User
  Admin
}
